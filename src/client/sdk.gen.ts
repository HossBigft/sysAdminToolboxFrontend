// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { GetARecordData, GetARecordError, GetARecordResponse, GetPtrRecordData, GetPtrRecordError, GetPtrRecordResponse, GetZoneMasterFromDnsServersData, GetZoneMasterFromDnsServersError, GetZoneMasterFromDnsServersResponse, DeleteZoneFileForDomainData, DeleteZoneFileForDomainError, DeleteZoneFileForDomainResponse, GetMxRecordData, GetMxRecordError, GetMxRecordResponse, GetPublicNsPropagationData, GetPublicNsPropagationError, GetPublicNsPropagationResponse, ResolveHostByDomainData, ResolveHostByDomainError, ResolveHostByDomainResponse, ResolveHostByIpData, ResolveHostByIpError, ResolveHostByIpResponse, GetARecordGoogleData, GetARecordGoogleError, GetARecordGoogleResponse, GetMxRecordGoogleData, GetMxRecordGoogleError, GetMxRecordGoogleResponse, GetAuthoritativeNsRecordsData, GetAuthoritativeNsRecordsError, GetAuthoritativeNsRecordsResponse, ReadUsersData, ReadUsersError, ReadUsersResponse, CreateUserData, CreateUserError, CreateUserResponse, ReadUserMeError, ReadUserMeResponse, DeleteUserMeError, DeleteUserMeResponse, UpdateUserMeData, UpdateUserMeError, UpdateUserMeResponse, UpdatePasswordMeData, UpdatePasswordMeError, UpdatePasswordMeResponse, RegisterUserData, RegisterUserError, RegisterUserResponse, ReadUserByIdData, ReadUserByIdError, ReadUserByIdResponse, UpdateUserData, UpdateUserError, UpdateUserResponse, DeleteUserData, DeleteUserError, DeleteUserResponse, GetOwnActionsData, GetOwnActionsError, GetOwnActionsResponse, GetUserActionsData, GetUserActionsError, GetUserActionsResponse, UpdateSuperuserMeData, UpdateSuperuserMeError, UpdateSuperuserMeResponse, FindPleskSubscriptionByDomainData, FindPleskSubscriptionByDomainError, FindPleskSubscriptionByDomainResponse, GetSubscriptionLoginLinkData, GetSubscriptionLoginLinkError, GetSubscriptionLoginLinkResponse, SetZonemasterData, SetZonemasterError, SetZonemasterResponse, CreateTestmailForDomainData, CreateTestmailForDomainError, CreateTestmailForDomainResponse, SharePublicKeyError, SharePublicKeyResponse, HealthCheckError, HealthCheckResponse, RecoverPasswordData, RecoverPasswordError, RecoverPasswordResponse, ResetPasswordData, ResetPasswordError, ResetPasswordResponse, RecoverPasswordHtmlContentData, RecoverPasswordHtmlContentError, RecoverPasswordHtmlContentResponse, LoginAccessTokenData, LoginAccessTokenError, LoginAccessTokenResponse, TestTokenError, TestTokenResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get A Record
 */
export const getARecord = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetARecordData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetARecordResponse, GetARecordError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/resolve/internal/a/'
    });
};

/**
 * Get Ptr Record
 */
export const getPtrRecord = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetPtrRecordData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPtrRecordResponse, GetPtrRecordError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/resolve/ptr/'
    });
};

/**
 * Get Zone Master From Dns Servers
 */
export const getZoneMasterFromDnsServers = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetZoneMasterFromDnsServersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetZoneMasterFromDnsServersResponse, GetZoneMasterFromDnsServersError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/internal/zonemaster/'
    });
};

/**
 * Delete Zone File For Domain
 */
export const deleteZoneFileForDomain = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteZoneFileForDomainData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteZoneFileForDomainResponse, DeleteZoneFileForDomainError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/internal/zonemaster/'
    });
};

/**
 * Get Mx Record
 */
export const getMxRecord = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetMxRecordData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMxRecordResponse, GetMxRecordError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/resolve/internal/mx/'
    });
};

/**
 * Get Public Ns Propagation
 */
export const getPublicNsPropagation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetPublicNsPropagationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPublicNsPropagationResponse, GetPublicNsPropagationError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/resolve/public/ns/propagation'
    });
};

/**
 * Resolve Host By Domain
 */
export const resolveHostByDomain = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ResolveHostByDomainData, ThrowOnError>) => {
    return (options?.client ?? client).get<ResolveHostByDomainResponse, ResolveHostByDomainError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/internal/hostbydomain'
    });
};

/**
 * Resolve Host By Ip
 */
export const resolveHostByIp = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ResolveHostByIpData, ThrowOnError>) => {
    return (options?.client ?? client).get<ResolveHostByIpResponse, ResolveHostByIpError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/internal/hostbyip'
    });
};

/**
 * Get A Record Google
 */
export const getARecordGoogle = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetARecordGoogleData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetARecordGoogleResponse, GetARecordGoogleError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/resolve/google/a/'
    });
};

/**
 * Get Mx Record Google
 */
export const getMxRecordGoogle = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetMxRecordGoogleData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMxRecordGoogleResponse, GetMxRecordGoogleError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/resolve/google/mx/'
    });
};

/**
 * Get Authoritative Ns Records
 */
export const getAuthoritativeNsRecords = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetAuthoritativeNsRecordsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAuthoritativeNsRecordsResponse, GetAuthoritativeNsRecordsError, ThrowOnError>({
        ...options,
        url: '/api/v1/dns/resolve/authoritative/ns/'
    });
};

/**
 * Read Users
 * Retrieve users.
 */
export const readUsers = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ReadUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadUsersResponse, ReadUsersError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/'
    });
};

/**
 * Create User
 * Create new user.
 */
export const createUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/'
    });
};

/**
 * Read User Me
 * Get current user.
 */
export const readUserMe = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadUserMeResponse, ReadUserMeError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me'
    });
};

/**
 * Delete User Me
 * Delete own user.
 */
export const deleteUserMe = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteUserMeResponse, DeleteUserMeError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me'
    });
};

/**
 * Update User Me
 * Update own user.
 */
export const updateUserMe = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateUserMeData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateUserMeResponse, UpdateUserMeError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me'
    });
};

/**
 * Update Password Me
 * Update own password.
 */
export const updatePasswordMe = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdatePasswordMeData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdatePasswordMeResponse, UpdatePasswordMeError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me/password'
    });
};

/**
 * Register User
 * Create new user without the need to be logged in.
 */
export const registerUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RegisterUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<RegisterUserResponse, RegisterUserError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/signup'
    });
};

/**
 * Read User By Id
 * Get a specific user by id.
 */
export const readUserById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ReadUserByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadUserByIdResponse, ReadUserByIdError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/{user_id}'
    });
};

/**
 * Update User
 * Update a user.
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateUserData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateUserResponse, UpdateUserError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/{user_id}'
    });
};

/**
 * Delete User
 * Delete a user.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteUserData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/{user_id}'
    });
};

/**
 * Get Own Actions
 */
export const getOwnActions = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetOwnActionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetOwnActionsResponse, GetOwnActionsError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/me/history'
    });
};

/**
 * Get User Actions
 */
export const getUserActions = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetUserActionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserActionsResponse, GetUserActionsError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/{user_id}/history'
    });
};

/**
 * Update Superuser Me
 * Update own superuser.
 */
export const updateSuperuserMe = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateSuperuserMeData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateSuperuserMeResponse, UpdateSuperuserMeError, ThrowOnError>({
        ...options,
        url: '/api/v1/users/superuser/me'
    });
};

/**
 * Find Plesk Subscription By Domain
 */
export const findPleskSubscriptionByDomain = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<FindPleskSubscriptionByDomainData, ThrowOnError>) => {
    return (options?.client ?? client).get<FindPleskSubscriptionByDomainResponse, FindPleskSubscriptionByDomainError, ThrowOnError>({
        ...options,
        url: '/api/v1/plesk/get/subscription/'
    });
};

/**
 * Get Subscription Login Link
 */
export const getSubscriptionLoginLink = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetSubscriptionLoginLinkData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetSubscriptionLoginLinkResponse, GetSubscriptionLoginLinkError, ThrowOnError>({
        ...options,
        url: '/api/v1/plesk/subscription/login-link'
    });
};

/**
 * Set Zonemaster
 */
export const setZonemaster = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SetZonemasterData, ThrowOnError>) => {
    return (options?.client ?? client).post<SetZonemasterResponse, SetZonemasterError, ThrowOnError>({
        ...options,
        url: '/api/v1/plesk/zonemaster/set'
    });
};

/**
 * Create Testmail For Domain
 */
export const createTestmailForDomain = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateTestmailForDomainData, ThrowOnError>) => {
    return (options?.client ?? client).get<CreateTestmailForDomainResponse, CreateTestmailForDomainError, ThrowOnError>({
        ...options,
        url: '/api/v1/plesk/subscription/testmail'
    });
};

/**
 * Share Public Key
 */
export const sharePublicKey = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<SharePublicKeyResponse, SharePublicKeyError, ThrowOnError>({
        ...options,
        url: '/api/v1/plesk/publickey'
    });
};

/**
 * Health Check
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
        ...options,
        url: '/api/v1/core_utils/health-check/'
    });
};

/**
 * Recover Password
 * Password Recovery
 */
export const recoverPassword = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RecoverPasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<RecoverPasswordResponse, RecoverPasswordError, ThrowOnError>({
        ...options,
        url: '/api/v1/password-recovery/{email}'
    });
};

/**
 * Reset Password
 * Reset password
 */
export const resetPassword = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ResetPasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<ResetPasswordResponse, ResetPasswordError, ThrowOnError>({
        ...options,
        url: '/api/v1/reset-password/'
    });
};

/**
 * Recover Password Html Content
 * HTML Content for Password Recovery
 */
export const recoverPasswordHtmlContent = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RecoverPasswordHtmlContentData, ThrowOnError>) => {
    return (options?.client ?? client).post<RecoverPasswordHtmlContentResponse, RecoverPasswordHtmlContentError, ThrowOnError>({
        ...options,
        url: '/api/v1/password-recovery-html-content/{email}'
    });
};

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests
 */
export const loginAccessToken = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LoginAccessTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginAccessTokenResponse, LoginAccessTokenError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/api/v1/login/access-token'
    });
};

/**
 * Test Token
 * Test access token
 */
export const testToken = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<TestTokenResponse, TestTokenError, ThrowOnError>({
        ...options,
        url: '/api/v1/login/test-token'
    });
};